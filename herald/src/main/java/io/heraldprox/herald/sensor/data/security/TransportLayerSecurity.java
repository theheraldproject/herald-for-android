//  Copyright 2021 Herald Project Contributors
//  SPDX-License-Identifier: Apache-2.0
//

package io.heraldprox.herald.sensor.data.security;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import io.heraldprox.herald.sensor.datatype.Data;
import io.heraldprox.herald.sensor.datatype.Tuple;

/**
 * Transport layer security (TLS) based on one-time secret agreed via key exchange
 * <br>
 * Expected sequence of events:
 * <br>- Alice obtains Bob's public key (Bob calls `readPublicKey` to generate the key pair)
 * <br>- Alice derives shared key using Bob's public key and encrypts data for Bob (Alice calls `writeEncryptedData` to establish session and encrypt data)
 * <br>- Alice writes encrypted data to Bob (Bob calls `receiveEncryptedData` to decode the message, establish session and decrypt data)
 * <br>- Alice optionally reads encrypted data from Bob (Bob calls `readEncryptedData` to generate encrypted data)
 * <br>- Alice decrypts data from Bob (Alice calls `receiveEncryptedData` to decode the message and decrypt data)
 */
public interface TransportLayerSecurity {

    /**
     * Alice reads public key from Bob. Bob calls this function to generate a new key pair and provides the public key
     * @return Bob's public key associated with a new session.
     */
    @NonNull
    KeyExchangePublicKey readPublicKey();

    /**
     * Alice uses Bob's public key to establish a shared encyption key, and uses the key to encrypt data for Bob.
     * Alice calls this function to generate an encoded message containing the session ID (derived from Bob's
     * public key), data encrypted using the shared key, and Alice's own public key for Bob. Alice writes
     * this message to Bob.
     *
     * @param peerPublicKey Peer's public key.
     * @param data Data to be encrypted with derived shared key.
     * @return Encoded data message containing (1) peer's session ID, (2) data encrypted with shared key, and (3) own public key, or null on failure.
     */
    @Nullable
    Data writeEncryptedData(@NonNull final KeyExchangePublicKey peerPublicKey, @NonNull final Data data);

    /**
     * Bob receives encoded message from Alice. The message is decoded to obtain the session ID (derived from Bob's public key),
     * data encrypted by Alice, and Alice's public key. Given Alice's publc key, Bob can now complete the key exchange and
     * derive the same shared key. The key is then used to decrypt the encrypted data from Alice. The function returns the
     * established session ID (derived from Bob's public key) and decrypted data.
     * @param data Encoded data message generated by writeEncryptedData() or readEncryptedData()
     * @return Tuple of established session ID and decrypted data, or null on failure.
     */
    @Nullable
    Tuple<TransportLayerSecuritySessionID,Data> receiveEncryptedData(@NonNull final Data data);

    /**
     * Alice may optionally request encrypted data from Bob, e.g. to securely read Bob's payload. Bob calls this function to
     * generate the encrypted data using the shared key associated with a session ID (derived from Bob's public key). This
     * function will generate an encoded message containing the session ID (derived from Alice's public key, note Alice's
     * session ID, not Bob's), and the encrypted data. Bob's public key is omitted from this message as the session is
     * already established. Alice reads this message from Bob, then Alice calls `receiveEncryptedData` to decode and decrypt
     * the message using the shared key associated with the encoded session ID.
     * @param sessionId Established session ID
     * @param data Data to be encrypted
     * @return Encoded data message containing (1) peer's session ID, (2) data encrypted with shared key, or null on failure.
     */
    @Nullable
    Data readEncryptedData(@NonNull final TransportLayerSecuritySessionID sessionId, @NonNull final Data data);
}
